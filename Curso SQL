CURSO SQL

--LINK UTEIS-- 
https://replit.com/~




---EXEMPLO LIMIT---
SELECT * FROM ADDRESS
LIMIT 10

SELECT * FROM ADDRESS
LIMIT 5, 10 -- PULA OS 5 PRIMEIROS


---EXEMPLO REGEXP---
WHERE FIRST_NAME REGEXP 'A'  -- NOMES QUE CONTENHAM A LETRA "A"
SELECT * FROM ACTOR

SELECT * FROM ACTOR
WHERE FIRST_NAME REGEXP '^A' -- NOMES QUE INICIAM COM A LETRA "A"

SELECT * FROM ACTOR
WHERE FIRST_NAME REGEXP '^A|D' -- NOMES QUE CONTENHAM A LETRA "A" E CONTENHAM A LETRA "D"

SELECT * FROM ACTOR
WHERE FIRST_NAME REGEXP '[GER]A' -- NOMES QUE CONTENHAM A SEQUENCIA "GA", "EA" E "RA"

SELECT * FROM ACTOR
WHERE FIRST_NAME REGEXP '^[GER]A' -- NOMES QUE INICIAM COM A SEQUENCIA "GA", "EA" E "RA"


---INSERT---
--INDIVIDUAL
INSERT INTO LANGUAGE
VALUES (DEFAULT, 'PORTUGESE', '2006-02-15 05:02:19'); -- SE INFORMAR NA SEQUENCIA DAS COLUNAS O MY SQL INSERE SEM A NECESSIDADE DE INFORMAR AS COLUNAS


--MULTIPLOS ID
INSERT INTO COUNTRY
	VALUES(DEFAULT, 'BRASIL2', '2035-02-15 05:02:19');

INSERT INTO CITY
	VALUES (DEFAULT, 'SÃO PAULO2', LAST_INSERT_ID(), '2034-02-15 05:02:19'); -- QUANDO NÃO SE SABE QUAL SERÁ O PRÓXIMO ID PODE USAR A FUNÇÃO LAST_INSERT_ID()


---CRIANDO BACKP DE TABELAS----
CREATE TABLE PAYMENT_BCKP AS
SELECT * FROM PAYMENT


----------------------------------------*********FUNÇÕES***************------------------------------------------


--MAX/AVG/MIN/SUM
SELECT MAX(AMOUNT) AS MAIOR,
MIN(AMOUNT) AS MENOR,
AVG(AMOUNT) AS 'MEDIA DE VALORES',
SUM(AMOUNT) AS 'TOTAL DE VENDAS',
COUNT(AMOUNT) AS 'NUMERO DE VENDAS'
FROM PAYMENT
WHERE STAFF_ID = '2'


SELECT 
AMOUNT 
FROM PAYMENT
WHERE AMOUNT > (SELECT AVG(AMOUNT) FROM PAYMENT) -- ONDE O AMOUNT ESTIVER ACIMA DA MÉDIA 
ORDER BY 1


---JOIN---
SELECT 
CUSTOMER_ID,
SUM(AMOUNT) AS TOTAL
FROM PAYMENT PAY
JOIN CUSTOMER CUS USING (CUSTOMER_ID) --USING DISPENSA O ON
GROUP BY CUSTOMER_ID


---HAVING---
SELECT 
	CUSTOMER_ID AS ID,
	FIRST_NAME AS NOME,
	LAST_NAME AS SOBRENOME,
	SUM(AMOUNT) AS TOTAL

FROM PAYMENT PAY
JOIN CUSTOMER CUS USING (CUSTOMER_ID)
GROUP BY CUSTOMER_ID
HAVING TOTAL >= 150    ---A DIFERENÇA DO HAVING É QUE ELE PODE SER UTILIZANDO APÓS O GROUP BY, DIFERENTE DO WHERE
ORDER BY TOTAL DESC



SELECT ---***ASSIM NÃO FUNCIONA POIS FOI CRIADA NA TABELA TEMPORARIA UMA COLUNA (COMPRAS_TEMPORARIA)QUE NÃO EXISTE NA TABELA ORIGINAL "COSTUMER".***------
CUSTOMER_ID
FROM 
CUSTOMER
WHERE CUSTOMER_ID IN (
	SELECT CUSTOMER_ID, COUNT(*) AS COMPRAS_REALIZADAS
	FROM PAYMENT
	GROUP BY 1
	HAVING COUNT(*) > 35
)

---FORMA CORRETA---

SELECT *
FROM 
CUSTOMER
WHERE CUSTOMER_ID IN (
	SELECT CUSTOMER_ID
	FROM PAYMENT
	GROUP BY CUSTOMER_ID
	HAVING COUNT(*) > 35

)

--ANY
SELECT *
FROM 
CUSTOMER
WHERE CUSTOMER_ID = ANY (  --- O IN SERIA DENTRO E O ANY É QUALQUER UM, COMO OS DOIS UTILIZANDO A MESMA TABELA TEMPORÁRIA O RESULTADO É O MESMO.
	SELECT CUSTOMER_ID
	FROM PAYMENT
	GROUP BY CUSTOMER_ID
	HAVING COUNT(*) > 35

)

----------------------------------------*********MANIPULANDO STRINGS***************------------------------------------------


---TRIM---

SELECT  TRIM('    CARROS            1 ') -- REMOVE EM AMBOS OS LADOS

SELECT  LTRIM('   CARROS            1 ') -- REMOVE APENAS NA ESQUERDA 

SELECT  RTRIM('   CARROS            1 ') -- REMOVE APENAS NA DIREITA

SELECT  TRIM(LEADING 'a' FROM 'aaaaCARROSaaaa')      -- REMOVE O CARACTER INFORMADO NA ESQUERDA

SELECT  TRIM(TRAILING 'a' FROM 'aaaaCARROSaaaaaaa')  -- REMOVE O CARACTER INFORMADO NA DIREITA

SELECT  TRIM(BOTH 'a' FROM 'aaaaCARROSaaaaaaa')      -- REMOVE O CARACTER INFORMADO EM AMBOS OS LADOS


--LOCATE

SELECT LOCATE('O', 'Carros') -- RETORNA A POSIÇÃO DO CACTERE INFORMADO


--LCASE/UCASE

SELECT LCASE('Carros') -- COLOCA TUDO EM MINÚSCULO

SELECT UCASE('Carros') -- COLOCA TUDO EM MAIÚSCULO


-- LENGTH

SELECT LENGTH('carros')  -- RETORNA O TAMANHO DA STRING


--REPEAT
SELECT RIGTH('carros', 4) -- RESTORNA OS ULTIMOS X CARACTERES À DIREITA


SELECT LEFT('carros', 4) -- RESTORNA OS PRIMEIROS X CARACTERES À ESQUERDA



---CRIANDO VEWS
CREATE OR REPLACE VIEW VENDAS_POR_CLIENTE AS -- UTILIZAR REPLACE PARA ATUALIZA A VIEW, E UTILIZAR O "CREATE OR REPLACE " PODE FACILITAR FUTURAMENTE ATUALIZAÇÕES.
SELECT 
CUS.CUSTOMER_ID,
CUS.FIRST_NAME,
CUS.LAST_NAME,
PAY.AMOUNT
FROM CUSTOMER CUS
JOIN PAYMENT PAY
	ON CUS.CUSTOMER_ID = PAY.CUSTOMER_ID




----IMPORTANDO UM DATA BASE NO MYSQL----

1 - LINK PARA BAIXAR EXEMPLOS DE DB: HTTPS://DEV.MYSQL.COM/DOC/INDEX-OTHER.HTML
2 - CLICAR NO BOTÃO 'OPEN A SQL SCRIPT FILE IN A NEW QUERY TAB' 
3 - (É NECESSÁRIO QUE TENHA UM ARQUIVO SCHEMA E UM ARQUIVO DATA)SELECIONAR PRIMEIRO O SCHEMA. IRÁ GERAR UM CÓDIGO SQL NO SCRIPT
4 - EXECUTAR CLICANDO NO BOTÃO SOMENTE DO RAIO OU CTRL + SHIFT + ENTER.
5 - ATUALIZAR A ABA DE SCHEMA.
6 - 



---CRIANDO/DROPANDO DATA BASES
CREATE DATABASE TESTE
DROP DATABASE TESTE


---CRIANDO/ALTERANDO TABELAS

CREATE TABLE marcas (
id INT NOT NULL AUTO_INCREMENT,
nome_marca  VARCHAR(255) NOT NULL,
PRIMARY KEY(id)
);

ALTER TABLE marcas ADD origem VARCHAR(255);


CREATE TABLE inventario (
id INT NOT NULL AUTO_INCREMENT,
modelo  VARCHAR(255) NOT NULL,
transmissao VARCHAR(255) NOT NULL,
motor VARCHAR(255) NOT NULL,
combustivel VARCHAR(255) NOT NULL,
marcas_id INT NOT NULL,
PRIMARY KEY(id),
FOREIGN KEY (marcas_id) REFERENCES marcas(id) --aqui eu digo ao SQL que o ID da tabela marcas será a CHAVE ESTRANGEIRA na tabela inventario

);


CREATE TABLE cliente (
id INT NOT NULL AUTO_INCREMENT,
nome  VARCHAR(255) NOT NULL,
sobrenome VARCHAR(255) NOT NULL,
endereco VARCHAR(255) NOT NULL,
PRIMARY KEY(id)
);



--- INSERINDO DADOS NA tabela


INSERT INTO clientes (nome, sobrenome, endereco)
VALUES 
('Andre', 'Iacono', 'Rua 1'),
('Marcos', 'Souza', 'Rua 2'),
('Ana', 'Silva', 'Rua 3'),
('Daniela', 'Pires', 'Rua 4'),
('Eduardo', 'Carvalho', 'Rua 5');


--- ADMINISTRAÇÃO DE USUÁRIOS 

--Visualizar Usuários
use mysql;
SELECT * FROM USER

SELECT * FROM mysql.user


--Criar usuário
CREATE USER ana IDENTIFIED BY '1212'


--Criar usuário limentado o local de acesso
CREATE USER joao@localhost IDENTIFIED BY '1212'; --após o @ é o endereço de onde ele pode acessar


-- Excluir Usuário
DROP USER ana 
DROP USER joao@localhost


-- Aterar senha de outro usuário
set password for joao@localhost = '4444'


-- Aterar a minha senha 
set password = '4444'

		--também é possível visualizar os usuário no WorkBench em Administration (grid inferior lado esquerdo primeira aba)
			--É possível alterar a senha ou resetar(Expire Password)para que o usuário digite a nova senha no próximo acesso.
	
	
-- Visualizar previgilégios dos usuários.

SHOW GRANTS FOR ana ;



-- Liberando previgilégios para os usuários.

GRANT SELECT, INSERT, UPDATE, DELETE  -- garante privilégios apenas para as ações informadas
ON sakila.*
TO ana ;

--

GRANT ALL  -- garante que o usuário possa fazer qualquer ação em qualquer DB.
ON *.*
TO joao@localhost ;



-- Revogando previgilégios para os usuários.

REVOKE UPDATE 
ON sakila.*
FROM priscila;

